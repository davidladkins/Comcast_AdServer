David L. Adkins
20160804

Create a AWS Elastic Beanstalk
1	 Initially you will want to create a single instance for testing.   When ready to go to production you will want upgrade to an auto scaling (load balancing) topography.
2	Select Tomcat as your container of choice
3	Once the instance is created you will need to upload generated war file using maven and stored in github. 
4	 Service has been deployed to  http://comcastadserverelasticbeans-env.us-east-1.elasticbeanstalk.com/
5	to add a new campaing POST to http://comcastadserverelasticbeans-env.us-east-1.elasticbeanstalk.com/ad
a.	payload
{
  "partnerId":"acme",
  "duration":300,
  "adContent":"Acme first add content"
}
6	to view an active partner campaign created above navigate to:
 http://comcastadserverelasticbeans-env.us-east-1.elasticbeanstalk.com/ad/acme
a.	Response will be:		{"duration":300,"expired":false,"partnerId":"acme","adContent":"Acme first add content"}
b.	If the campaign has expired, you will receive:


7	To view all campaigns for a partner go to:
http://comcastadserverelasticbeans-env.us-east-1.elasticbeanstalk.com/ad/all/acme




If deploying to a remote Tomcat server using maven script please follow instructions found at:
https://www.mkyong.com/maven/how-to-deploy-maven-based-war-file-to-tomcat/

If you have access to the tomcat server and have permisions to shut it down and restart you can
follow the following procedure:

1. Stop Tomcat. $TOMCAT_HOME/bin/bin/shutdown.sh
2. Delete existing deployment if you have previously deployed your war file in TOMCAT_HOME/webapps
   then it has been unpacked into webapps/foo/... You must delete this directory and all its contents. 
   On Unix, this can be done with rm -r $TOMCAT_HOME/webapps/foo
3. Copy WAR file to TOMCAT_HOME/webapps/.
4. Start Tomcat. $TOMCAT_HOME/bin/startup.sh
